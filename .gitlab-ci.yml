stages:
  - build
  - test
  - deploy

variables:
  DOCKER_HOST: tcp://docker:2375/
  DOCKER_DRIVER: overlay2

# Official docker compose image.
image:
  name: docker/compose:latest
services:
  - docker:dind

before_script:
  - docker version
  - docker-compose version

build_docker_compose:
  stage: build
  script:
    - docker-compose down
    - docker-compose build
    - docker-compose up tester-image


build_backend:
  stage: build
  before_script:
    - docker info
    - docker -v
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker build --cache-from $CI_REGISTRY_IMAGE:latest --tag $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA --tag $CI_REGISTRY_IMAGE:latest ./backend
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE:latest

build_frontend:
  stage: build
  script:
    - echo "Here will go building frontend script"

test_backend_django_tests:
  stage: test
  needs:
    - job: build_backend
      artifacts: true
  script:
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker run $CI_REGISTRY_IMAGE:latest python manage.py test

test_backend_django_pytest:
  stage: test
  needs:
    - job: build_backend
      artifacts: true
  script:
    - docker pull $CI_REGISTRY_IMAGE:latest || true
    - docker run $CI_REGISTRY_IMAGE:latest pytest

test_frontend:
  stage: test
  needs: [build_frontend]
  script:
    - echo "Testing fronted script will go here!"

deploy_backend:
  stage: deploy
  needs:
    - test_backend_django_pytest
    - test_backend_django_tests
  script:
    - echo "Deploy backend script goes here."

deploy_fronted:
  stage: deploy
  needs:
    - test_frontend
  script:
    - echo "Deploy frontend script goes here."
